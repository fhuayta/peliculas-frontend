stages:
  - building
  - testing
  - deployment
  - delivery

Instalando dependencias:
  image: node:12.20-slim
  stage: building
  except:
    refs:
    - master
  tags:
    - frontend-base-vue
  script:
    - npm set registry http://repositorio.agetic.gob.bo/nexus/repository/npmjs
    - npm set strict-ssl false
    - npm ci
  artifacts:
    paths:
      - node_modules/
      - package-lock.json
    expire_in: 1 day
  allow_failure: false
Ejecutando Linting:
  image: node:12.20-slim
  stage: testing
  except:
    refs:
      - master
  tags:
    - frontend-base-vue
  script:
    - npm run lint
  allow_failure: false

Verificando paquetes:
  image: node:12.20-slim
  tags:
    - frontend-base-vue
  stage: testing
  except:
    refs:
      - master
  script:
    - npm set registry http://repositorio.agetic.gob.bo/nexus/repository/npmjs
    - npm set strict-ssl false
    - npm audit
  allow_failure: true

Ejecutando tests de integraciÃ³n:
  image: node:12.20-slim
  stage: testing
  except:
    refs:
      - master
  tags:
    - frontend-base-vue
  script:
    - npm run test

Generando reportes de test:
  image: sonarsource/sonar-scanner-cli:4.1
  stage: testing
  except:
    refs:
      - master
  tags:
    - frontend-base-vue
  script:
    - npm test
    - npm run coverage
    - sonar-scanner -Dsonar.qualitygate.wait=true -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.sources=src -Dsonar.host.url=$TEST_REPO_URL -Dsonar.login=$TEST_REPO_TOKEN -Dsonar.exclusions=/node_modules/,tests/,coverage/ -Dsonar.tests=tests -Dsonar.test.inclusions=tests/unit/*.spec.js -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.testExecutionReportPaths=test-report.xml -Dsonar.projectVersion=v0.1.1
  allow_failure: true

Generando imagen docker (Dev):
  image: gcr.io/kaniko-project/executor:v1.3.0-debug
  # image: gcr.io/kaniko-project/executor:debug-v0.23.0
  stage: deployment
  only:
    refs:
      - develop
  tags:
    - frontend-base-vue
  script:
    - echo $CONFIGURE_IMAGE | base64 -d > ./configure-image-generation.sh
    - chmod +x ./configure-image-generation.sh
    - . ./configure-image-generation.sh
    - /kaniko/executor --context . --dockerfile ./Dockerfile --destination $IR_REPO_URL:dev

Generando imagen docker (Test):
  image: gcr.io/kaniko-project/executor:debug-v0.23.0
  stage: deployment
  only:
    refs:
      - test
  tags:
    - frontend-base-vue
  script:
    - echo $CONFIGURE_IMAGE | base64 -d > ./configure-image-generation.sh
    - chmod +x ./configure-image-generation.sh
    - . ./configure-image-generation.sh
    - /kaniko/executor --context . --dockerfile ./Dockerfile --destination $IR_REPO_URL:test

Generando imagen docker (Sand):
  image: gcr.io/kaniko-project/executor:debug-v0.23.0
  stage: deployment
  only:
    refs:
      - sandbox
  tags:
    - frontend-base-vue
  script:
    - echo $CONFIGURE_IMAGE | base64 -d > ./configure-image-generation.sh
    - chmod +x ./configure-image-generation.sh
    - . ./configure-image-generation.sh
    - /kaniko/executor --context . --dockerfile ./Dockerfile --destination $IR_REPO_URL:sand

Generando imagen docker (Prod):
  image: gcr.io/kaniko-project/executor:debug-v0.23.0
  stage: deployment
  only:
    refs:
      - tags
  tags:
    - frontend-base-vue
  script:
    - echo $CONFIGURE_IMAGE | base64 -d > ./configure-image-generation.sh
    - chmod +x ./configure-image-generation.sh
    - . ./configure-image-generation.sh
    - /kaniko/executor --context . --dockerfile ./Dockerfile --destination $IR_REPO_URL:$CI_COMMIT_TAG

Desplegando container (Dev):
  image: alpine/helm:3.1.3
  stage: delivery
  only:
    refs:
      - develop
  tags:
    - frontend-base-vue
  script:
    - echo $CI_PROJECT_NAME
    - echo "=========="
    - export IOP_VAULT_ENVIRONMENT=develop
    - echo $DEPLOY_CONTAINER | base64 -d > ./configure-container-deployment.sh
    - chmod +x ./configure-container-deployment.sh
    - . ./configure-container-deployment.sh
    - helm repo add --username "robot$"$IR_USER --password $IR_PASS repository $IR_CHART_REPO_URL
    - helm repo update
    - helm repo
    - helm upgrade -i --debug $CI_PROJECT_NAME-dev repository/$IR_CHART_NAME --kubeconfig ./config.yml -f values.yml -n development --force --set gitlabCommit=$CI_COMMIT_SHORT_SHA

Desplegando container (Test):
  image: alpine/helm:3.1.3
  stage: delivery
  only:
    refs:
      - test
  tags:
    - frontend-base-vue
  script:
    - export IOP_VAULT_ENVIRONMENT=test
    - echo $DEPLOY_CONTAINER | base64 -d > ./configure-container-deployment.sh
    - chmod +x ./configure-container-deployment.sh
    - . ./configure-container-deployment.sh
    - helm repo add --username "robot$"$IR_USER --password $IR_PASS repository $IR_CHART_REPO_URL
    - helm repo update
    - helm upgrade -i --debug $CI_PROJECT_NAME-test repository/$IR_CHART_NAME --kubeconfig ./config.yml -f values.yml -n testing --force --set gitlabCommit=$CI_COMMIT_SHORT_SHA

Desplegando container (Sand):
  image: alpine/helm:3.1.3
  stage: delivery
  only:
    refs:
      - sandbox
  tags:
    - frontend-base-vue
  script:
    - export IOP_VAULT_ENVIRONMENT=sandbox
    - echo $DEPLOY_CONTAINER | base64 -d > ./configure-container-deployment.sh
    - chmod +x ./configure-container-deployment.sh
    - . ./configure-container-deployment.sh
    - helm repo add --username "robot$"$IR_USER --password $IR_PASS repository $IR_CHART_REPO_URL
    - helm repo update
    - helm upgrade -i --debug $CI_PROJECT_NAME-sand repository/$IR_CHART_NAME --kubeconfig ./config.yml -f values.yml -n sandbox --force --set gitlabCommit=$CI_COMMIT_SHORT_SHA

Desplegando container (Prod):
  image: alpine/helm:3.1.3
  stage: delivery
  only:
    refs:
      - tags
  tags:
    - frontend-base-vue
  script:
    - export IOP_VAULT_ENVIRONMENT=production
    - echo $DEPLOY_CONTAINER | base64 -d > ./configure-container-deployment.sh
    - chmod +x ./configure-container-deployment.sh
    - . ./configure-container-deployment.sh
    - helm repo add --username "robot$"$IR_USER --password $IR_PASS repository $IR_CHART_REPO_URL
    - helm repo update
    - helm upgrade -i --debug $CI_PROJECT_NAME-prod repository/$IR_CHART_NAME --kubeconfig ./config.yml -f values.yml -n production --force --set gitlabCommit=$CI_COMMIT_SHORT_SHA
